name: Salesforce Deploy / Validate Workflow

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Choose action"
        required: true
        default: "Deploy to Sandbox"
        type: choice
        options:
          - Deploy to Sandbox
          - Deploy to Production
          - Validate in Sandbox
          - Validate in Production

jobs:
  operate:
    name: "${{ github.event.inputs.action }}"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Prefer setup-sfdx for official setup
      - name: Setup Salesforce CLI
        uses: sfdx-actions/setup-sfdx@v1
        # Optional: with sfdx-version or auth here if needed

      # Fallback: direct download if npm or setup-sfdx fails
      - name: Fallback Install sfdx
        if: failure()
        run: |
          wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
          mkdir -p sfdx && tar xJf sfdx-linux-x64.tar.xz -C sfdx --strip-components 1
          echo "PATH=$(pwd)/sfdx/bin:$PATH" >> $GITHUB_ENV

      - name: Authenticate
        run: |
          case "${{ github.event.inputs.action }}" in
            *Production*) SFDX_URL=https://login.salesforce.com; ORG=prod ;;
            *) SFDX_URL=https://test.salesforce.com; ORG=sandbox ;;
          esac
          echo "Authenticating to $ORG..."
          sfdx force:auth:device:login -d -a $ORG -r $SFDX_URL

      - name: Execute Action
        run: |
          ACTION="${{ github.event.inputs.action }}"
          ORG_ALIAS=$( [[ "$ACTION" =~ Production ]] && echo "prod" || echo "sandbox" )

          if [[ "$ACTION" == Validate* ]]; then
            echo "Running validation (dry-run) in $ORG_ALIAS"
            sfdx force:source:deploy -p force-app -u "$ORG_ALIAS" --checkonly --testlevel NoTestRun
          else
            echo "Deploying to $ORG_ALIAS"
            sfdx force:source:deploy -p force-app -u "$ORG_ALIAS" --testlevel NoTestRun
          fi
